# azure-pipelines.yml
name: terraform-infra

trigger:
  branches:
    include: [ main ]
  paths:
    include:
      - iam/**
      - s3/**
      - azure-pipelines.yml
      - .azure-pipelines/terraform-infra.yml

pr:
  branches:
    include: [ main ]
  paths:
    include:
      - iam/**
      - s3/**
      - azure-pipelines.yml
      - .azure-pipelines/terraform-infra.yml

variables:
  tfVersion: "1.13.3"
  awsRegion: "us-east-1"
  TF_PLUGIN_CACHE_DIR: "$(Pipeline.Workspace)/.terraform.d/plugin-cache"

stages:
- stage: tf
  displayName: Terraform CI/CD
  jobs:
  # ---------- Detect changed folders ----------
  - job: detect
    displayName: Detect iam/s3 changes
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0

    - script: |
        set -eo pipefail

        if [ "$(Build.Reason)" = "PullRequest" ] && [ -n "$(System.PullRequest.TargetBranch)" ]; then
          git fetch origin $(System.PullRequest.TargetBranch):refs/remotes/origin/targetbranch
          DIFF_RANGE="origin/targetbranch...HEAD"
        else
          git rev-parse HEAD~1 >/dev/null 2>&1 && DIFF_RANGE="HEAD~1...HEAD" || DIFF_RANGE="HEAD"
        fi

        echo "Using diff range: $DIFF_RANGE"
        CHANGED="$(git diff --name-only $DIFF_RANGE || true)"
        echo "$CHANGED"

        HAS_IAM=false
        HAS_S3=false
        echo "$CHANGED" | grep -E '^iam/' >/dev/null 2>&1 && HAS_IAM=true || true
        echo "$CHANGED" | grep -E '^s3/'  >/dev/null 2>&1 && HAS_S3=true  || true

        echo "##vso[task.setvariable variable=changedIam;isOutput=true]$HAS_IAM"
        echo "##vso[task.setvariable variable=changedS3;isOutput=true]$HAS_S3"
      displayName: Diff and set outputs
      name: setvars

  # ---------- PLAN (PR) ----------
  - job: plan_iam
    displayName: Plan IAM (PR)
    dependsOn: detect
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(dependencies.detect.outputs['setvars.changedIam'], 'true'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Cache@2
      displayName: Cache Terraform plugins (iam)
      inputs:
        key: 'tf-plugins-iam | "$(Agent.OS)" | iam/.terraform.lock.hcl'
        path: '$(TF_PLUGIN_CACHE_DIR)'
        restoreKeys: |
          tf-plugins-iam | "$(Agent.OS)"

    - script: |
        set -eo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        mkdir -p "$(TF_PLUGIN_CACHE_DIR)"

        # Install Terraform $(tfVersion) without marketplace tasks
        curl -fsSL "https://releases.hashicorp.com/terraform/$(tfVersion)/terraform_$(tfVersion)_linux_amd64.zip" -o tf.zip
        sudo unzip -o tf.zip -d /usr/local/bin
        rm tf.zip
        terraform -version

        # Export AWS creds: prefer IAM-specific, then fallback to generic
        export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_IAM:-${AWS_ACCESS_KEY_ID:-}}"
        export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_IAM:-${AWS_SECRET_ACCESS_KEY:-}}"
        export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN_IAM:-${AWS_SESSION_TOKEN:-}}"
        export AWS_DEFAULT_REGION="${awsRegion}"

        [ -n "$AWS_ACCESS_KEY_ID" ] || { echo "ERROR: Missing AWS_ACCESS_KEY_ID(_IAM)"; exit 1; }
        [ -n "$AWS_SECRET_ACCESS_KEY" ] || { echo "ERROR: Missing AWS_SECRET_ACCESS_KEY(_IAM)"; exit 1; }

        export TF_PLUGIN_CACHE_DIR="$(TF_PLUGIN_CACHE_DIR)"
        cd iam
        terraform fmt -check -recursive
        terraform init -input=false
        terraform validate -no-color
        terraform plan -input=false -no-color -out=tfplan

        mkdir -p "$(Build.ArtifactStagingDirectory)/iam"
        cp tfplan "$(Build.ArtifactStagingDirectory)/iam/"
      displayName: Terraform plan (iam)

    - publish: $(Build.ArtifactStagingDirectory)/iam
      artifact: iam-tfplan

  - job: plan_s3
    displayName: Plan S3 (PR)
    dependsOn: detect
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(dependencies.detect.outputs['setvars.changedS3'], 'true'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - task: Cache@2
      displayName: Cache Terraform plugins (s3)
      inputs:
        key: 'tf-plugins-s3 | "$(Agent.OS)" | s3/.terraform.lock.hcl'
        path: '$(TF_PLUGIN_CACHE_DIR)'
        restoreKeys: |
          tf-plugins-s3 | "$(Agent.OS)"

    - script: |
        set -eo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        mkdir -p "$(TF_PLUGIN_CACHE_DIR)"

        curl -fsSL "https://releases.hashicorp.com/terraform/$(tfVersion)/terraform_$(tfVersion)_linux_amd64.zip" -o tf.zip
        sudo unzip -o tf.zip -d /usr/local/bin
        rm tf.zip
        terraform -version

        # Export AWS creds: prefer USE1-specific, then fallback to generic
        export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_USE1:-${AWS_ACCESS_KEY_ID:-}}"
        export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_USE1:-${AWS_SECRET_ACCESS_KEY:-}}"
        export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN_USE1:-${AWS_SESSION_TOKEN:-}}"
        export AWS_DEFAULT_REGION="${awsRegion}"

        [ -n "$AWS_ACCESS_KEY_ID" ] || { echo "ERROR: Missing AWS_ACCESS_KEY_ID(_USE1)"; exit 1; }
        [ -n "$AWS_SECRET_ACCESS_KEY" ] || { echo "ERROR: Missing AWS_SECRET_ACCESS_KEY(_USE1)"; exit 1; }

        export TF_PLUGIN_CACHE_DIR="$(TF_PLUGIN_CACHE_DIR)"
        cd s3
        terraform fmt -check -recursive
        terraform init -input=false
        terraform validate -no-color
        terraform plan -input=false -no-color -out=tfplan

        mkdir -p "$(Build.ArtifactStagingDirectory)/s3"
        cp tfplan "$(Build.ArtifactStagingDirectory)/s3/"
      displayName: Terraform plan (s3)

    - publish: $(Build.ArtifactStagingDirectory)/s3
      artifact: s3-tfplan

  # ---------- APPLY (push to main) ----------
  - job: apply_iam
    displayName: Apply IAM (main)
    dependsOn: detect
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(dependencies.detect.outputs['setvars.changedIam'], 'true'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - script: |
        set -eo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        mkdir -p "$(TF_PLUGIN_CACHE_DIR)"

        curl -fsSL "https://releases.hashicorp.com/terraform/$(tfVersion)/terraform_$(tfVersion)_linux_amd64.zip" -o tf.zip
        sudo unzip -o tf.zip -d /usr/local/bin
        rm tf.zip
        terraform -version

        export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_IAM:-${AWS_ACCESS_KEY_ID:-}}"
        export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_IAM:-${AWS_SECRET_ACCESS_KEY:-}}"
        export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN_IAM:-${AWS_SESSION_TOKEN:-}}"
        export AWS_DEFAULT_REGION="${awsRegion}"

        [ -n "$AWS_ACCESS_KEY_ID" ] || { echo "ERROR: Missing AWS_ACCESS_KEY_ID(_IAM)"; exit 1; }
        [ -n "$AWS_SECRET_ACCESS_KEY" ] || { echo "ERROR: Missing AWS_SECRET_ACCESS_KEY(_IAM)"; exit 1; }

        export TF_PLUGIN_CACHE_DIR="$(TF_PLUGIN_CACHE_DIR)"
        cd iam
        terraform init -input=false
        terraform apply -input=false -auto-approve

        SUMMARY="$(System.DefaultWorkingDirectory)/terraform-iam-summary.md"
        echo "### IAM: Terraform Outputs" > "$SUMMARY"
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> "$SUMMARY"
        echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=IAM Terraform Outputs;]$SUMMARY"
      displayName: Terraform apply (iam)

  - job: apply_s3
    displayName: Apply S3 (main)
    dependsOn: detect
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(dependencies.detect.outputs['setvars.changedS3'], 'true'))
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - script: |
        set -eo pipefail
        sudo apt-get update -y
        sudo apt-get install -y unzip jq
        mkdir -p "$(TF_PLUGIN_CACHE_DIR)"

        curl -fsSL "https://releases.hashicorp.com/terraform/$(tfVersion)/terraform_$(tfVersion)_linux_amd64.zip" -o tf.zip
        sudo unzip -o tf.zip -d /usr/local/bin
        rm tf.zip
        terraform -version

        export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_USE1:-${AWS_ACCESS_KEY_ID:-}}"
        export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_USE1:-${AWS_SECRET_ACCESS_KEY:-}}"
        export AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN_USE1:-${AWS_SESSION_TOKEN:-}}"
        export AWS_DEFAULT_REGION="${awsRegion}"

        [ -n "$AWS_ACCESS_KEY_ID" ] || { echo "ERROR: Missing AWS_ACCESS_KEY_ID(_USE1)"; exit 1; }
        [ -n "$AWS_SECRET_ACCESS_KEY" ] || { echo "ERROR: Missing AWS_SECRET_ACCESS_KEY(_USE1)"; exit 1; }

        export TF_PLUGIN_CACHE_DIR="$(TF_PLUGIN_CACHE_DIR)"
        cd s3
        terraform init -input=false
        terraform apply -input=false -auto-approve

        SUMMARY="$(System.DefaultWorkingDirectory)/terraform-s3-summary.md"
        echo "### S3: Terraform Outputs" > "$SUMMARY"
        terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> "$SUMMARY"
        echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=S3 Terraform Outputs;]$SUMMARY"
      displayName: Terraform apply (s3)
