name: Build & Deploy Lambda (Container Image)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - "requirements.txt"
      - "lambda_function.py"
      - ".github/workflows/deploy-lambda-image.yml"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPO: lambda-uptime-pdf
  LAMBDA_FUNC: html_to_pdf_lambda_function     # <-- your existing function name
  ARCH: x86_64

  # Lambda runtime config
  LAMBDA_MEMORY: "1536"
  LAMBDA_TIMEOUT: "120"
  LAMBDA_EPHEMERAL: "1024"

  # App env vars for your function
  SRC_BUCKET: lambda-output-report-000000987123
  DEST_BUCKET: pdf-uptime-reports-0000009
  BASE_PREFIX: uptime
  ALLOW_PDF_SKIP: "false"
  PLAYWRIGHT_WAIT: domcontentloaded
  PDF_FORMAT: A4

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      GH_AKI: ${{ vars.AWS_ACCESS_KEY_ID }}
      GH_SAK: ${{ vars.AWS_SECRET_ACCESS_KEY }}
      LAMBDA_ROLE_ARN: ${{ vars.LAMBDA_ROLE_ARN }}
      FORCE_RECREATE: ${{ vars.FORCE_RECREATE }}
      S3_TRIGGER_BUCKET: ${{ vars.S3_TRIGGER_BUCKET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate repo variables
        run: |
          set -euo pipefail
          [ -n "${GH_AKI:-}" ] || { echo "Missing repo variable AWS_ACCESS_KEY_ID"; exit 1; }
          [ -n "${GH_SAK:-}" ] || { echo "Missing repo variable AWS_SECRET_ACCESS_KEY"; exit 1; }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.GH_AKI }}
          aws-secret-access-key: ${{ env.GH_SAK }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPO}" --image-scanning-configuration scanOnPush=true

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euo pipefail
          IMAGE_LATEST="${REGISTRY}/${ECR_REPO}:latest"
          IMAGE_SHA="${REGISTRY}/${ECR_REPO}:${GITHUB_SHA}"
          docker build --platform linux/amd64 -t "${IMAGE_LATEST}" -t "${IMAGE_SHA}" .
          docker push "${IMAGE_LATEST}"
          docker push "${IMAGE_SHA}"
          echo "IMAGE_SHA=${IMAGE_SHA}" >> $GITHUB_ENV

      - name: Detect function package type
        id: pkg
        run: |
          set -euo pipefail
          if aws lambda get-function --function-name "${LAMBDA_FUNC}" >/dev/null 2>&1; then
            PT=$(aws lambda get-function-configuration --function-name "${LAMBDA_FUNC}" --query PackageType --output text)
            echo "pkgType=${PT}" >> $GITHUB_OUTPUT
          else
            echo "pkgType=NONE" >> $GITHUB_OUTPUT
          fi

      - name: Create function (if absent)
        if: steps.pkg.outputs.pkgType == 'NONE'
        run: |
          set -euo pipefail
          [ -n "${LAMBDA_ROLE_ARN:-}" ] || { echo "Function missing AND LAMBDA_ROLE_ARN not set"; exit 1; }
          aws lambda create-function \
            --function-name "${LAMBDA_FUNC}" \
            --package-type Image \
            --code ImageUri="${IMAGE_SHA}" \
            --role "${LAMBDA_ROLE_ARN}" \
            --architectures ${ARCH} \
            --timeout ${LAMBDA_TIMEOUT} \
            --memory-size ${LAMBDA_MEMORY} \
            --ephemeral-storage "{\"Size\": ${LAMBDA_EPHEMERAL}}" \
            --environment "Variables={
              SRC_BUCKET=${SRC_BUCKET},
              DEST_BUCKET=${DEST_BUCKET},
              BASE_PREFIX=${BASE_PREFIX},
              ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
              PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
              PDF_FORMAT=${PDF_FORMAT}
            }" \
            --region "${AWS_REGION}"
          echo "JUST_CREATED=1" >> $GITHUB_ENV

      - name: Recreate ZIP function as container (optional destructive)
        if: steps.pkg.outputs.pkgType == 'Zip'
        run: |
          set -euo pipefail
          if [ "${FORCE_RECREATE:-}" != "true" ]; then
            echo "Function exists as ZIP. Set repo var FORCE_RECREATE=true to delete and recreate as container, or create a new function name."; exit 1;
          fi
          [ -n "${LAMBDA_ROLE_ARN:-}" ] || { echo "FORCE_RECREATE=true but LAMBDA_ROLE_ARN not set"; exit 1; }
          aws lambda delete-function --function-name "${LAMBDA_FUNC}"
          aws lambda create-function \
            --function-name "${LAMBDA_FUNC}" \
            --package-type Image \
            --code ImageUri="${IMAGE_SHA}" \
            --role "${LAMBDA_ROLE_ARN}" \
            --architectures ${ARCH} \
            --timeout ${LAMBDA_TIMEOUT} \
            --memory-size ${LAMBDA_MEMORY} \
            --ephemeral-storage "{\"Size\": ${LAMBDA_EPHEMERAL}}" \
            --environment "Variables={
              SRC_BUCKET=${SRC_BUCKET},
              DEST_BUCKET=${DEST_BUCKET},
              BASE_PREFIX=${BASE_PREFIX},
              ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
              PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
              PDF_FORMAT=${PDF_FORMAT}
            }" \
            --region "${AWS_REGION}"
          echo "JUST_CREATED=1" >> $GITHUB_ENV

      - name: Update code (Image) when function is container
        if: steps.pkg.outputs.pkgType == 'Image'
        run: |
          set -euo pipefail
          aws lambda update-function-code \
            --function-name "${LAMBDA_FUNC}" \
            --image-uri "${IMAGE_SHA}" \
            --region "${AWS_REGION}"

      - name: Update configuration (env/memory/timeout)
        if: steps.pkg.outputs.pkgType != 'Zip'
        run: |
          set -euo pipefail
          aws lambda update-function-configuration \
            --function-name "${LAMBDA_FUNC}" \
            --architectures ${ARCH} \
            --timeout ${LAMBDA_TIMEOUT} \
            --memory-size ${LAMBDA_MEMORY} \
            --ephemeral-storage "{\"Size\": ${LAMBDA_EPHEMERAL}}" \
            --environment "Variables={
              SRC_BUCKET=${SRC_BUCKET},
              DEST_BUCKET=${DEST_BUCKET},
              BASE_PREFIX=${BASE_PREFIX},
              ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
              PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
              PDF_FORMAT=${PDF_FORMAT}
            }" \
            --region "${AWS_REGION}"

      - name: Re-add S3 invoke permission (only if created/recreated and bucket provided)
        if: env.JUST_CREATED == '1' && env.S3_TRIGGER_BUCKET != ''
        run: |
          set -euo pipefail
          aws lambda add-permission \
            --function-name "${LAMBDA_FUNC}" \
            --statement-id s3invoke-$(date +%s) \
            --action lambda:InvokeFunction \
            --principal s3.amazonaws.com \
            --source-arn arn:aws:s3:::${S3_TRIGGER_BUCKET} \
            --region "${AWS_REGION}" || true

      - name: Publish version
        if: steps.pkg.outputs.pkgType != 'Zip'
        run: |
          set -euo pipefail
          aws lambda publish-version --function-name "${LAMBDA_FUNC}" --region "${AWS_REGION}" >/dev/null
