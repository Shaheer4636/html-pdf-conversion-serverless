name: Build & Deploy Lambda (Container)

on:
  push:
    branches: [ "main" ]
    paths:
      - "lambda_function.py"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPO: lambda-uptime-pdf
  LAMBDA_FUNC: html_to_pdf_lambda_function
  ARCH: x86_64

  # Lambda runtime config
  LAMBDA_MEMORY: "1536"
  LAMBDA_TIMEOUT: "120"
  LAMBDA_EPHEMERAL: "1024"

  # App env vars passed to Lambda
  SRC_BUCKET: lambda-output-report-000000987123
  DEST_BUCKET: pdf-uptime-reports-0000009
  BASE_PREFIX: uptime
  ALLOW_PDF_SKIP: "false"
  PLAYWRIGHT_WAIT: domcontentloaded   # ignored by wkhtmltopdf (kept for compatibility)
  PDF_FORMAT: A4

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      AKI: ${{ vars.AWS_ACCESS_KEY_ID }}
      SAK: ${{ vars.AWS_SECRET_ACCESS_KEY }}
      LAMBDA_ROLE_ARN: ${{ vars.LAMBDA_ROLE_ARN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate repo variables
        run: |
          set -euo pipefail
          [ -n "${AKI:-}" ] || { echo "Missing repo variable AWS_ACCESS_KEY_ID"; exit 1; }
          [ -n "${SAK:-}" ] || { echo "Missing repo variable AWS_SECRET_ACCESS_KEY"; exit 1; }
          [ -n "${LAMBDA_ROLE_ARN:-}" ] || { echo "Missing repo variable LAMBDA_ROLE_ARN"; exit 1; }

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AKI }}
          aws-secret-access-key: ${{ env.SAK }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPO}" --image-scanning-configuration scanOnPush=true

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # >>> NEW: download wkhtmltopdf RPM into ./tools (picked from official releases)
      - name: Download wkhtmltopdf RPM
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
          mkdir -p tools
          found=""
          # Try a few likely tags (newest first), fall back to querying all releases
          for tag in 0.12.6.1-2 0.12.6.1 0.12.6-1; do
            if url=$(curl -fsSL "https://api.github.com/repos/wkhtmltopdf/packaging/releases/tags/${tag}" \
              | jq -r '.assets[]?.browser_download_url' \
              | grep -E 'wkhtmltox-.*(almalinux9|amazonlinux2).*\.x86_64\.rpm' \
              | head -n1); then
              if [ -n "$url" ]; then
                echo "Tag ${tag}: $url"
                curl -fSL "$url" -o tools/wkhtmltox.rpm
                found="1"
                break
              fi
            fi
          done
          if [ -z "${found}" ]; then
            # fallback: scan latest 5 releases
            for page in 1 2; do
              url=$(curl -fsSL "https://api.github.com/repos/wkhtmltopdf/packaging/releases?per_page=5&page=${page}" \
                | jq -r '.[].assets[]?.browser_download_url' \
                | grep -E 'wkhtmltox-.*(almalinux9|amazonlinux2).*\.x86_64\.rpm' \
                | head -n1 || true)
              if [ -n "$url" ]; then
                echo "From releases list: $url"
                curl -fSL "$url" -o tools/wkhtmltox.rpm
                found="1"
                break
              fi
            done
          fi
          test -s tools/wkhtmltox.rpm || { echo "FATAL: could not find wkhtmltopdf rpm asset"; exit 1; }

      - name: Build and push image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euo pipefail
          IMAGE_LATEST="${REGISTRY}/${ECR_REPO}:latest"
          IMAGE_SHA="${REGISTRY}/${ECR_REPO}:${GITHUB_SHA}"

          docker build --platform linux/amd64 -t "${IMAGE_LATEST}" -t "${IMAGE_SHA}" .
          docker push "${IMAGE_LATEST}"
          docker push "${IMAGE_SHA}"

          echo "IMAGE_SHA=${IMAGE_SHA}" >> $GITHUB_ENV

      - name: Detect function package type
        id: pkg
        run: |
          set -euo pipefail
          if aws lambda get-function --function-name "${LAMBDA_FUNC}" >/dev/null 2>&1; then
            PT=$(aws lambda get-function-configuration --function-name "${LAMBDA_FUNC}" --query PackageType --output text)
            echo "pkgType=${PT}" >> $GITHUB_OUTPUT
          else
            echo "pkgType=NONE" >> $GITHUB_OUTPUT
          fi

      - name: Create function (container)
        if: steps.pkg.outputs.pkgType == 'NONE'
        run: |
          set -euo pipefail
          aws lambda create-function \
            --function-name "${LAMBDA_FUNC}" \
            --package-type Image \
            --code ImageUri="${IMAGE_SHA}" \
            --role "${LAMBDA_ROLE_ARN}" \
            --architectures ${ARCH} \
            --timeout "${LAMBDA_TIMEOUT}" \
            --memory-size "${LAMBDA_MEMORY}" \
            --ephemeral-storage '{"Size": '"${LAMBDA_EPHEMERAL}"'}' \
            --environment "Variables={
              SRC_BUCKET=${SRC_BUCKET},
              DEST_BUCKET=${DEST_BUCKET},
              BASE_PREFIX=${BASE_PREFIX},
              ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
              PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
              PDF_FORMAT=${PDF_FORMAT}
            }" \
            --region "${AWS_REGION}"
          echo "JUST_CREATED=1" >> $GITHUB_ENV

      - name: Recreate ZIP function as container (same name)
        if: steps.pkg.outputs.pkgType == 'Zip'
        run: |
          set -euo pipefail
          aws lambda delete-function --function-name "${LAMBDA_FUNC}"
          aws lambda create-function \
            --function-name "${LAMBDA_FUNC}" \
            --package-type Image \
            --code ImageUri="${IMAGE_SHA}" \
            --role "${LAMBDA_ROLE_ARN}" \
            --architectures ${ARCH} \
            --timeout "${LAMBDA_TIMEOUT}" \
            --memory-size "${LAMBDA_MEMORY}" \
            --ephemeral-storage '{"Size": '"${LAMBDA_EPHEMERAL}"'}' \
            --environment "Variables={
              SRC_BUCKET=${SRC_BUCKET},
              DEST_BUCKET=${DEST_BUCKET},
              BASE_PREFIX=${BASE_PREFIX},
              ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
              PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
              PDF_FORMAT=${PDF_FORMAT}
            }" \
            --region "${AWS_REGION}"
          echo "JUST_CREATED=1" >> $GITHUB_ENV

      - name: Update code (container)
        if: steps.pkg.outputs.pkgType == 'Image'
        run: |
          set -euo pipefail
          aws lambda update-function-code \
            --function-name "${LAMBDA_FUNC}" \
            --image-uri "${IMAGE_SHA}" \
            --region "${AWS_REGION}"
          echo "JUST_UPDATED_CODE=1" >> $GITHUB_ENV

      - name: Wait until function is ready
        run: |
          set -euo pipefail
          aws lambda wait function-active --function-name "${LAMBDA_FUNC}" --region "${AWS_REGION}"
          aws lambda wait function-updated --function-name "${LAMBDA_FUNC}" --region "${AWS_REGION}"
          sleep 5

      - name: Update configuration (env/memory/timeout)
        run: |
          set -euo pipefail
          for i in $(seq 1 10); do
            if aws lambda update-function-configuration \
              --function-name "${LAMBDA_FUNC}" \
              --timeout "${LAMBDA_TIMEOUT}" \
              --memory-size "${LAMBDA_MEMORY}" \
              --ephemeral-storage '{"Size": '"${LAMBDA_EPHEMERAL}"'}' \
              --environment "Variables={
                SRC_BUCKET=${SRC_BUCKET},
                DEST_BUCKET=${DEST_BUCKET},
                BASE_PREFIX=${BASE_PREFIX},
                ALLOW_PDF_SKIP=${ALLOW_PDF_SKIP},
                PLAYWRIGHT_WAIT=${PLAYWRIGHT_WAIT},
                PDF_FORMAT=${PDF_FORMAT}
              }" \
              --region "${AWS_REGION}"; then
              echo "Config updated."; break
            else
              echo "Config update attempt $i failed; waiting and retrying..."
              sleep $((3*i))
            fi
          done

      - name: Wait for configuration to apply
        run: |
          set -euo pipefail
          aws lambda wait function-updated --function-name "${LAMBDA_FUNC}" --region "${AWS_REGION}"

      - name: Publish version
        run: |
          set -euo pipefail
          aws lambda publish-version --function-name "${LAMBDA_FUNC}" --region "${AWS_REGION}" >/dev/null
