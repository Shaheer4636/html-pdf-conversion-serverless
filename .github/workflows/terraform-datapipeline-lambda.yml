name: terraform-datapipeline-lambda

on:
  push:
    branches: [ "main" ]
    paths:
      - "datapipeline-lambda/**"
      - ".github/workflows/terraform-datapipeline-lambda.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "datapipeline-lambda/**"
      - ".github/workflows/terraform-datapipeline-lambda.yml"
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  TF_VERSION: "1.6.6"
  WORKDIR: datapipeline-lambda

  # AWS from repo VARIABLES (not secrets)
  AWS_REGION: ${{ vars.AWS_REGION != '' && vars.AWS_REGION || 'us-east-1' }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION != '' && vars.AWS_REGION || 'us-east-1' }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Guard & mask AWS repo variables
        shell: bash
        run: |
          echo "::add-mask::${AWS_ACCESS_KEY_ID}"
          echo "::add-mask::${AWS_SECRET_ACCESS_KEY}"
          test -n "${AWS_ACCESS_KEY_ID}" || { echo "Missing repo variable AWS_ACCESS_KEY_ID"; exit 1; }
          test -n "${AWS_SECRET_ACCESS_KEY}" || { echo "Missing repo variable AWS_SECRET_ACCESS_KEY"; exit 1; }
          test -n "${{ vars.LAMBDA_ROLE_ARN_DataPipeline }}" || { echo "Missing repo variable LAMBDA_ROLE_ARN_DataPipeline"; exit 1; }
          test -n "${{ vars.CANARY_BUCKET_NAME }}" || { echo "Missing repo variable CANARY_BUCKET_NAME"; exit 1; }
          test -n "${{ vars.REPORT_BUCKET_NAME }}" || { echo "Missing repo variable REPORT_BUCKET_NAME"; exit 1; }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Export TF_VAR_* (from repo variables)
        shell: bash
        run: |
          echo "TF_VAR_region=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_lambda_role_arn=${{ vars.LAMBDA_ROLE_ARN_DataPipeline }}" >> $GITHUB_ENV
          echo "TF_VAR_artifact_bucket=${{ vars.CANARY_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_reports_bucket=${{ vars.REPORT_BUCKET_NAME }}" >> $GITHUB_ENV

      - name: Terraform fmt
        working-directory: ${{ env.WORKDIR }}
        run: terraform fmt -check -recursive

      - name: Terraform init
        working-directory: ${{ env.WORKDIR }}
        run: terraform init -input=false

      - name: Terraform validate
        working-directory: ${{ env.WORKDIR }}
        run: terraform validate -no-color

      - name: Terraform plan
        working-directory: ${{ env.WORKDIR }}
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: datapipeline-lambda-tfplan
          path: datapipeline-lambda/tfplan

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Guard & mask AWS repo variables
        shell: bash
        run: |
          echo "::add-mask::${AWS_ACCESS_KEY_ID}"
          echo "::add-mask::${AWS_SECRET_ACCESS_KEY}"
          test -n "${AWS_ACCESS_KEY_ID}" || { echo "Missing repo variable AWS_ACCESS_KEY_ID"; exit 1; }
          test -n "${AWS_SECRET_ACCESS_KEY}" || { echo "Missing repo variable AWS_SECRET_ACCESS_KEY"; exit 1; }
          test -n "${{ vars.LAMBDA_ROLE_ARN_DataPipeline }}" || { echo "Missing repo variable LAMBDA_ROLE_ARN_DataPipeline"; exit 1; }
          test -n "${{ vars.CANARY_BUCKET_NAME }}" || { echo "Missing repo variable CANARY_BUCKET_NAME"; exit 1; }
          test -n "${{ vars.REPORT_BUCKET_NAME }}" || { echo "Missing repo variable REPORT_BUCKET_NAME"; exit 1; }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Export TF_VAR_* (from repo variables)
        shell: bash
        run: |
          echo "TF_VAR_region=${AWS_REGION}" >> $GITHUB_ENV
          echo "TF_VAR_lambda_role_arn=${{ vars.LAMBDA_ROLE_ARN_DataPipeline }}" >> $GITHUB_ENV
          echo "TF_VAR_artifact_bucket=${{ vars.CANARY_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_reports_bucket=${{ vars.REPORT_BUCKET_NAME }}" >> $GITHUB_ENV

      - name: Terraform init
        working-directory: ${{ env.WORKDIR }}
        run: terraform init -input=false

      - name: Terraform apply
        working-directory: ${{ env.WORKDIR }}
        run: terraform apply -input=false -auto-approve

      - name: Show outputs
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "### Lambda Outputs" >> $GITHUB_STEP_SUMMARY
          terraform output -json | jq -r 'to_entries[] | "- **\(.key)**: \(.value.value)"' >> $GITHUB_STEP_SUMMARY
